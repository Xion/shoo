#!/bin/sh

# Tests for the shoo script

shopt -s expand_aliases


# Setup

SCRIPT='./shoo'

# "Import" the functions defined in tested script,
# omitting the last line that actually executes it
eval "$(head -n $(($(cat $SCRIPT | wc -l) - 1)) $SCRIPT)"
shoo() {
    "$SCRIPT" "$@" 2>&1  # redirection simplifies calls inside tests
}


# Utilities

FAIL=255
alias fail='return $FAIL'
alias assertExitSuccess='[[ $? -eq 0 ]] || fail'
alias assertExitFailure='! [[ $? -eq 0 ]] || fail'


# Tests

# Variable to assign tested command output's to
# (for assertions on the command's exit code to work, it must be global)
out=""

test_no_args() {
    out=$(shoo)
    assertExitFailure
    contains "$out" 'usage' || fail
}

test_help() {
    for flag in -h --help -?; do
        out=$(shoo "$flag")
        assertExitSuccess
        contains "$out" 'usage' || fail
    done
}

test_unknown_option() {
    out=$(shoo --not-an-option)
    assertExitFailure
    contains "$(lowercase "$out")" 'unknown option' || fail
}

test_duplicate_pid__flag_and_positional() {
    local pid1=42
    local pid2=43

    out=$(shoo --pid $pid1 $pid2)
    assertExitFailure

    contains "$(lowercase "$out")" 'duplicate' || fail
    contains "$out" 'PID' || fail
    contains "$out" $pid1 || fail
    contains "$out" $pid2 || fail
}

test_duplicate_pid__two_flags() {
    local pid1=42
    local pid2=43

    out=$(shoo --pid $pid1 --pid $pid2)
    assertExitFailure

    contains "$(lowercase "$out")" 'duplicate' || fail
    contains "$out" 'PID' || fail
    contains "$out" $pid1 || fail
    contains "$out" $pid2 || fail
}

test_duplicate_processname__flag_and_positional() {
    local pname1=foo
    local pname2=bar

    out="$(shoo --name $pname1 $pname2)"
    assertExitFailure

    contains "$(lowercase "$out")" 'duplicate' || fail
    contains "$out" 'process name' || fail
    contains "$out" $pname1 || fail
    contains "$out" $pname2 || fail
}

test_duplicate_processname__two_flags() {
    local pname1=foo
    local pname2=bar

    out="$(shoo --name $pname1 --name $pname2)"
    assertExitFailure

    contains "$(lowercase "$out")" 'duplicate' || fail
    contains "$out" 'process name' || fail
    contains "$out" $pname1 || fail
    contains "$out" $pname2 || fail
}

test_both_pid_and_processname() {
    local pid=42
    local pname=foo

    out=$(shoo --name $pname --pid $pid)
    assertExitFailure

    contains "$(lowercase "$out")" 'either' || fail
}

test_unknown_resource_type() {
    local type_=foo
    local name=bar

    out=$(shoo --from $type_:$name)
    assertExitFailure

    contains "$(lowercase "$out")" 'unknown resource type' || fail
    contains "$out" $type_ || fail
}

test_duplicate_resource__flag_and_positional() {
    local from1="tcp:4242"
    local from2="./foo"  # positional resource can only be a file path

    out=$(shoo --from $from1 $from2)

    contains "$(lowercase "$out")" 'duplicate' || fail
    contains "$out" 'resource' || fail
    contains "$out" "$from1" || fail
    contains "$out" "$from2" || fail
}

test_duplicate_resource__two_flags() {
    local from1="tcp:4242"
    local from2="tcp:31337"

    out=$(shoo --from $from1 --from $from2)

    contains "$(lowercase "$out")" 'duplicate' || fail
    contains "$out" 'resource' || fail
    contains "$out" "$from1" || fail
    contains "$out" "$from2" || fail
}

test_infer_tcp_resource() {
    out=$(shoo --from 4242)
    assertExitSuccess

    contains "$(lowercase "$out")" 'assuming' || fail
    contains "$out" 'tcp' || fail
}

test_infer_file_resource() {
    out=$(shoo --from ./foo)
    assertExitSuccess

    contains "$(lowercase "$out")" 'assuming' || fail
    contains "$out" 'file' || fail
}


# Test runner

_run_tests() {
    local file="$1"

    local passcount=0 ; local failcount=0 ; local errcount=0
    local failout="" ; local errout=""
    for func in $(_list_test_functions "$file"); do
        _logf "Running %s..." "$func"
        "$func" 2>/dev/null
        case $? in
            0)
                _logf " PASS\n"
                ((++passcount))
                ;;
            $FAIL)
                _logf " FAIL\n"
                ((++failcount))
                failout=$(printf '%s* %s:\n%s\n\n' "$failout" "$func" "$out")
                ;;
            *)
                _logf " ERROR\n"
                ((++errcount))
                errout=$(printf '%s* %s:\n%s\n\n' "$errout" "$func" "$out")
                ;;
        esac
        # TODO(xion): implement --failfast
    done

    _logf "\n$passcount passed, $failcount failed, $errcount errors\n"
    if [[ "$failcount" -gt 0 ]]; then
        printf '\nTest failures:\n%s' "$failout"
    fi
    if [[ "$errcount" -gt 0 ]]; then
        printf '\nTest errors:\n%s' "$errout"
    fi
}

_list_test_functions() {
    _list_functions "$1" | sed -e '\%^test_% !d'
}

_list_functions() {
    # Return a list of all functions defined inside a script
    # TODO(xion): support ``function foo {`` syntax in addition to ``foo() {``
    cat "$1" | sed \
        -e '\%^[[:space:]]*[_[:alnum:]]*[(][)][[:space:]]*[{]% !d' \
        -e 's/[(][)][[:space:]]*[{]//g'
}

_logf() {
    printf >&2 "$@"
}

_run_tests "${BASH_SOURCE-$0}"
