#!/bin/sh

# Tests for the shoo script

shopt -s expand_aliases


# Setup

SCRIPT='./shoo'

# "Import" the functions defined in tested script,
# omitting the last line that actually executes it
eval "$(head -n $(($(cat $SCRIPT | wc -l) - 1)) $SCRIPT)"
shoo() {
    "$SCRIPT" "$@" 2>&1  # redirection simplifies calls inside tests
}


# Utilities

FAIL=37  # arbitrary
alias fail='return $FAIL'
alias assertExitSuccess='[[ $? -eq 0 ]] || fail'
alias assertExitFailure='! [[ $? -eq 0 ]] || fail'


# Tests

# Variable to assign tested command output's to
# (for asssertions on the command's exit code to work, it must be global)
out=""

test_no_args() {
    out=$(shoo)
    assertExitFailure
    contains "$out" 'usage' || fail
}

test_help() {
    for flag in -h --help -?; do
        out=$(shoo "$flag")
        assertExitSuccess
        contains "$out" 'usage' || fail
    done
}

test_unknown_option() {
    out=$(shoo --not-an-option)
    assertExitFailure
    contains "$(lowercase "$out")" 'unknown option' || fail
}


# Test runner

_run_tests() {
    local file="$1"

    local failout=""
    local errout=""
    for func in $(_list_test_functions "$file"); do
        _logf "Running %s..." "$func"
        "$func" 2>/dev/null
        case $? in
            0)      _logf " PASS\n" ;;
            $FAIL)
                _logf " FAIL\n"
                failout=$(printf '%s* %s:\n%s\n\n' "$failout" "$func" "$out")
                ;;
            *)
                _logf " ERROR\n"
                errout=$(printf '%s* %s:\n%s\n\n' "$errout" "$func" "$out")
                ;;
        esac
        # TODO(xion): implement --failfast
    done

    if [[ -n "$failout" ]]; then
        printf '\nTest failures:\n%s' "$failout"
    fi
    if [[ -n "$errout" ]]; then
        printf '\nTest errors:\n%s' "$errout"
    fi
}

_list_test_functions() {
    _list_functions "$1" | sed -e '\%^test_% !d'
}

_list_functions() {
    # Return a list of all functions defined inside a script
    # TODO(xion): support ``function foo {`` syntax in addition to ``foo() {``
    cat "$1" | sed \
        -e '\%^[[:space:]]*[_[:alnum:]]*[(][)][[:space:]]*[{]% !d' \
        -e 's/[(][)][[:space:]]*[{]//g'
}

_logf() {
    printf >&2 "$@"
}

_run_tests "$0"
